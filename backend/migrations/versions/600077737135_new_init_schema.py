"""new_init_schema

Revision ID: 600077737135
Revises:
Create Date: 2025-04-26 18:01:09.138804

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '600077737135'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create users table first
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('handle', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('profile_image', sa.String(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=True),
    sa.Column('user_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_admin', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('handle')
    )

    # Create topics table
    op.create_table('topics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Create processes table
    op.create_table('processes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('last_updated', sa.String(), nullable=True),
    sa.Column('favorite', sa.Boolean(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('process_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_template', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('template_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['template_id'], ['processes.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )

    # Now create directories
    op.create_table('directories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('icon', sa.String(), nullable=True),
    sa.Column('directory_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_id'], ['directories.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_directories_created_by_id', 'directories', ['created_by_id'], unique=False)
    op.create_index('idx_directories_name', 'directories', ['name'], unique=False)
    op.create_index('idx_directories_parent_id', 'directories', ['parent_id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('type', sa.Enum('MENTION', 'COMMENT', 'EVENT_INVITE', 'EVENT_REMINDER', 'EVENT_UPDATE', 'NEW_MESSAGE', 'SYSTEM', 'FOLLOW', name='notificationtypeenum'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('link', sa.String(), nullable=True),
    sa.Column('read', sa.Boolean(), nullable=True),
    sa.Column('reference_id', sa.UUID(), nullable=True),
    sa.Column('reference_type', sa.String(), nullable=True),
    sa.Column('notification_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notifications_created_at', 'notifications', ['created_at'], unique=False)
    op.create_index('idx_notifications_read', 'notifications', ['read'], unique=False)
    op.create_index('idx_notifications_sender_id', 'notifications', ['sender_id'], unique=False)
    op.create_index('idx_notifications_type', 'notifications', ['type'], unique=False)
    op.create_index('idx_notifications_user_id', 'notifications', ['user_id'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('file_url', sa.String(), nullable=False),
    sa.Column('report_type', sa.String(), nullable=False),
    sa.Column('date_range', sa.String(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('report_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_reports_created_at', 'reports', ['created_at'], unique=False)
    op.create_index('idx_reports_report_type', 'reports', ['report_type'], unique=False)
    op.create_index('idx_reports_user_id', 'reports', ['user_id'], unique=False)
    op.create_table('events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('date', sa.String(), nullable=True),
    sa.Column('time', sa.String(), nullable=True),
    sa.Column('duration', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PLANNING', 'EXECUTION', 'REVIEW', 'ADMINISTRATIVE', 'DONE', 'ONGOING', 'UPCOMING', 'COMPLETED', 'READY', name='eventstatusenum'), nullable=True),
    sa.Column('complexity', sa.Integer(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('recording_url', sa.String(), nullable=True),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('process_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['process_id'], ['processes.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_events_created_by_id', 'events', ['created_by_id'], unique=False)
    op.create_index('idx_events_date', 'events', ['date'], unique=False)
    op.create_index('idx_events_end_time', 'events', ['end_time'], unique=False)
    op.create_index('idx_events_process_id', 'events', ['process_id'], unique=False)
    op.create_index('idx_events_start_time', 'events', ['start_time'], unique=False)
    op.create_index('idx_events_status', 'events', ['status'], unique=False)
    op.create_table('event_participants',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('status', sa.Enum('INVITED', 'CONFIRMED', 'DECLINED', 'ATTENDED', name='participantstatusenum'), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'user_id')
    )
    op.create_index('idx_event_participants_event_id', 'event_participants', ['event_id'], unique=False)
    op.create_index('idx_event_participants_status', 'event_participants', ['status'], unique=False)
    op.create_index('idx_event_participants_user_id', 'event_participants', ['user_id'], unique=False)
    op.create_table('event_topics',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('topic_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'topic_id')
    )
    op.create_index('idx_event_topics_event_id', 'event_topics', ['event_id'], unique=False)
    op.create_index('idx_event_topics_topic_id', 'event_topics', ['topic_id'], unique=False)
    op.create_table('posts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('visibility', sa.String(), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_posts_author_id', 'posts', ['author_id'], unique=False)
    op.create_index('idx_posts_created_at', 'posts', ['created_at'], unique=False)
    op.create_index('idx_posts_event_id', 'posts', ['event_id'], unique=False)
    op.create_table('status_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('previous_status', sa.Enum('PENDING', 'PLANNING', 'EXECUTION', 'REVIEW', 'ADMINISTRATIVE', 'DONE', 'ONGOING', 'UPCOMING', 'COMPLETED', 'READY', name='eventstatusenum'), nullable=True),
    sa.Column('new_status', sa.Enum('PENDING', 'PLANNING', 'EXECUTION', 'REVIEW', 'ADMINISTRATIVE', 'DONE', 'ONGOING', 'UPCOMING', 'COMPLETED', 'READY', name='eventstatusenum'), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_status_logs_created_at', 'status_logs', ['created_at'], unique=False)
    op.create_index('idx_status_logs_event_id', 'status_logs', ['event_id'], unique=False)
    op.create_index('idx_status_logs_new_status', 'status_logs', ['new_status'], unique=False)
    op.create_index('idx_status_logs_user_id', 'status_logs', ['user_id'], unique=False)
    op.create_table('steps',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('due_date', sa.String(), nullable=True),
    sa.Column('process_id', sa.UUID(), nullable=True),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['process_id'], ['processes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_steps_completed', 'steps', ['completed'], unique=False)
    op.create_index('idx_steps_event_id', 'steps', ['event_id'], unique=False)
    op.create_index('idx_steps_order', 'steps', ['order'], unique=False)
    op.create_index('idx_steps_process_id', 'steps', ['process_id'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('type', sa.Enum('VIDEO', 'IMAGE', 'AUDIO', 'QUOTE', 'EVENT', name='mediatypeenum'), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('duration', sa.String(), nullable=True),
    sa.Column('aspect_ratio', sa.String(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(), nullable=True),
    sa.Column('thumbnail_url', sa.String(), nullable=True),
    sa.Column('media_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('post_id', sa.UUID(), nullable=True),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_media_event_id', 'media', ['event_id'], unique=False)
    op.create_index('idx_media_post_id', 'media', ['post_id'], unique=False)
    op.create_index('idx_media_type', 'media', ['type'], unique=False)
    op.create_table('sub_steps',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('step_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['step_id'], ['steps.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sub_steps_completed', 'sub_steps', ['completed'], unique=False)
    op.create_index('idx_sub_steps_order', 'sub_steps', ['order'], unique=False)
    op.create_index('idx_sub_steps_step_id', 'sub_steps', ['step_id'], unique=False)
    op.add_column('processes', sa.Column('process_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('processes', sa.Column('is_template', sa.Boolean(), nullable=True))
    op.add_column('processes', sa.Column('directory_id', sa.UUID(), nullable=True))
    op.add_column('processes', sa.Column('template_id', sa.UUID(), nullable=True))
    op.alter_column('processes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('processes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index('idx_processes_category', 'processes', ['category'], unique=False)
    op.create_index('idx_processes_created_by_id', 'processes', ['created_by_id'], unique=False)
    op.create_index('idx_processes_directory_id', 'processes', ['directory_id'], unique=False)
    op.create_index('idx_processes_favorite', 'processes', ['favorite'], unique=False)
    op.create_index('idx_processes_is_template', 'processes', ['is_template'], unique=False)
    op.drop_constraint('processes_created_by_id_fkey', 'processes', type_='foreignkey')
    op.create_foreign_key(None, 'processes', 'processes', ['template_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'processes', 'users', ['created_by_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'processes', 'directories', ['directory_id'], ['id'], ondelete='SET NULL')
    op.alter_column('topics', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('topics', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index('idx_topics_category', 'topics', ['category'], unique=False)
    op.create_index('idx_topics_name', 'topics', ['name'], unique=False)
    op.add_column('user_preferences', sa.Column('additional_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('user_preferences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_preferences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index('idx_user_preferences_user_id', 'user_preferences', ['user_id'], unique=False)
    op.drop_constraint('user_preferences_user_id_fkey', 'user_preferences', type_='foreignkey')
    op.create_foreign_key(None, 'user_preferences', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('user_preferences', 'push_notifications')
    # Create indexes for users table
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_handle', 'users', ['handle'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_users_handle', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.add_column('user_preferences', sa.Column('push_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_preferences', type_='foreignkey')
    op.create_foreign_key('user_preferences_user_id_fkey', 'user_preferences', 'users', ['user_id'], ['id'])
    op.drop_index('idx_user_preferences_user_id', table_name='user_preferences')
    op.alter_column('user_preferences', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('user_preferences', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('user_preferences', 'additional_settings')
    op.drop_index('idx_topics_name', table_name='topics')
    op.drop_index('idx_topics_category', table_name='topics')
    op.alter_column('topics', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('topics', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'processes', type_='foreignkey')
    op.drop_constraint(None, 'processes', type_='foreignkey')
    op.drop_constraint(None, 'processes', type_='foreignkey')
    op.create_foreign_key('processes_created_by_id_fkey', 'processes', 'users', ['created_by_id'], ['id'])
    op.drop_index('idx_processes_is_template', table_name='processes')
    op.drop_index('idx_processes_favorite', table_name='processes')
    op.drop_index('idx_processes_directory_id', table_name='processes')
    op.drop_index('idx_processes_created_by_id', table_name='processes')
    op.drop_index('idx_processes_category', table_name='processes')
    op.alter_column('processes', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('processes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('processes', 'template_id')
    op.drop_column('processes', 'directory_id')
    op.drop_column('processes', 'is_template')
    op.drop_column('processes', 'process_metadata')
    op.drop_index('idx_sub_steps_step_id', table_name='sub_steps')
    op.drop_index('idx_sub_steps_order', table_name='sub_steps')
    op.drop_index('idx_sub_steps_completed', table_name='sub_steps')
    op.drop_table('sub_steps')
    op.drop_index('idx_media_type', table_name='media')
    op.drop_index('idx_media_post_id', table_name='media')
    op.drop_index('idx_media_event_id', table_name='media')
    op.drop_table('media')
    op.drop_index('idx_steps_process_id', table_name='steps')
    op.drop_index('idx_steps_order', table_name='steps')
    op.drop_index('idx_steps_event_id', table_name='steps')
    op.drop_index('idx_steps_completed', table_name='steps')
    op.drop_table('steps')
    op.drop_index('idx_status_logs_user_id', table_name='status_logs')
    op.drop_index('idx_status_logs_new_status', table_name='status_logs')
    op.drop_index('idx_status_logs_event_id', table_name='status_logs')
    op.drop_index('idx_status_logs_created_at', table_name='status_logs')
    op.drop_table('status_logs')
    op.drop_index('idx_posts_event_id', table_name='posts')
    op.drop_index('idx_posts_created_at', table_name='posts')
    op.drop_index('idx_posts_author_id', table_name='posts')
    op.drop_table('posts')
    op.drop_index('idx_event_topics_topic_id', table_name='event_topics')
    op.drop_index('idx_event_topics_event_id', table_name='event_topics')
    op.drop_table('event_topics')
    op.drop_index('idx_event_participants_user_id', table_name='event_participants')
    op.drop_index('idx_event_participants_status', table_name='event_participants')
    op.drop_index('idx_event_participants_event_id', table_name='event_participants')
    op.drop_table('event_participants')
    op.drop_index('idx_events_status', table_name='events')
    op.drop_index('idx_events_start_time', table_name='events')
    op.drop_index('idx_events_process_id', table_name='events')
    op.drop_index('idx_events_end_time', table_name='events')
    op.drop_index('idx_events_date', table_name='events')
    op.drop_index('idx_events_created_by_id', table_name='events')
    op.drop_table('events')
    op.drop_index('idx_reports_user_id', table_name='reports')
    op.drop_index('idx_reports_report_type', table_name='reports')
    op.drop_index('idx_reports_created_at', table_name='reports')
    op.drop_table('reports')
    op.drop_index('idx_notifications_user_id', table_name='notifications')
    op.drop_index('idx_notifications_type', table_name='notifications')
    op.drop_index('idx_notifications_sender_id', table_name='notifications')
    op.drop_index('idx_notifications_read', table_name='notifications')
    op.drop_index('idx_notifications_created_at', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index('idx_directories_parent_id', table_name='directories')
    op.drop_index('idx_directories_name', table_name='directories')
    op.drop_index('idx_directories_created_by_id', table_name='directories')
    op.drop_table('directories')
    # ### end Alembic commands ###
